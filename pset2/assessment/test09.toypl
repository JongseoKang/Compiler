namespace Util

  func exp(m,n)
  var r
  begin
    r <- 1;
    while (n > 0) do {
      r <- r * m;
      n <- n - 1;
    };
    return r;
  end

  func isqrt(n)
  var r
  begin
    r <- 0;
    while ((r + 1) * (r + 1) <= n) do
      r <- r + 1;
    return r;
  end

  func is_prime(n)
  var r, i
  begin
    if (n <= 1) then
      return 0
    else
      skip;
    r <- call isqrt(n);
    i <- 2;
    while (i <= r) do
      if (n % i == 0) then
        return 0
      else
        i <- i+1;
    return 1;
  end

  func next_prime(n)
  var p
  begin
    p <- 0;
    while (p == 0) do {
      n <- n + 1;
      p <- call is_prime(n);
    };
    return n
  end

end

namespace Godel

  var code, prime

  func init_put()
  begin
    code <- 1;
    prime <- 2;
  end

  func put(x)
  var t
  begin
    t <- call Util.exp(prime, x);
    code <- code * t;
    prime <- call Util.next_prime(prime);
    return code;
  end

  func init_get()
  begin
    prime <- 2;
  end

  func get()
  var x
  begin
    x <- 0;
    while (code % prime == 0) do {
      code <- code / prime;
      x <- x + 1;
    };
    prime <- call Util.next_prime(prime);
    return x;
  end

end


func main()
var r, x, _
begin
  _ <- call Godel.init_put();
  x <- 1;
  while (x > 0) do {
    x <- read;
    if (x > 0) then
      r <- call Godel.put(x)
    else
      skip
  };

  print(Godel.code);

  _ <- call Godel.init_get();
  x <- 1;
  while (x > 0) do {
    x <- call Godel.get();
    if (x > 0) then
      print(x)
    else
      skip
  }
end
